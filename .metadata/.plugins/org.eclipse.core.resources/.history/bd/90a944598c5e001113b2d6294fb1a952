/*
 * ThreadPool.h
 *
 *  Created on: Feb 9, 2012
 *      Author: webadm
 */

#ifndef THREADPOOL_H_
#define THREADPOOL_H_
#include <Thread.h>
#include <Array.h>
#include <RefcountedObject.h>
namespace System {
class InternalTaskObj {
public:

	void(*callback)(void* sender);
	void* data;
	bool operator ==(InternalTaskObj other) {
			return callback == other.callback && data == other.data;

	};
	bool operator !=(InternalTaskObj other) {
		return !(callback == other.callback && data == other.data);

	}
};
class PoolableThread:public RefcountedObject {
	Thread* nativethread;
	Mutex* waitObj;
	Mutex* syncobj;
	Array<InternalTaskObj>* tasks;
	bool isrunning;
	static void callback(void* sender) {
		PoolableThread thisptr = *(PoolableThread*)sender;
		while(isrunning) {
			void* handle = 0;
			if(*(thisptr.tasks->length) == 0) {
			handle = thisptr.waitObj->AcquireMutex(INFINITE);
			thisptr.waitObj->UnacquireMutex(handle);

		}
		//LOCK(tasks)
					handle = thisptr.syncobj->AcquireMutex(INFINITE);
					if(*(thisptr.tasks->length)>0) {
					InternalTaskObj task = (*tasks)[0];
					task.callback(task.data);
					thisptr.tasks->Remove(task);
					}
					thisptr.syncobj->UnacquireMutex(handle);
					//end lock
		}
	}
	void* syncHandle;
	PoolableThread(MemAllocator* allocator):RefcountedObject(allocator) {
		isrunning = true;
		nativethread = new(allocator->allocMem(sizeof(Thread)))Thread(callback,allocator);
		waitObj = new(allocator->allocMem(sizeof(Mutex)))Mutex(allocator);
		tasks = new(allocator->allocMem(sizeof(Array<InternalTaskObj>)))Array<InternalTaskObj>(0,allocator);
		syncobj = new(allocator->allocMem(sizeof(Mutex)))Mutex(allocator);
		syncHandle = 0;
		nativethread->Start(this);
	}
	void Kill() {
		isrunning = false;
		if(syncHandle !=0) {
		waitObj->UnacquireMutex(syncHandle);
		}
	}
	void Destroy() {
		nativethread->~Thread();
		waitObj->~Mutex();
		tasks->~Array<InternalTaskObj>();
		syncobj->~Mutex();
	}
};
class ThreadPool:public RefcountedObject {
private:
	Array<PoolableThread>* threads;
public:
	ThreadPool(MemAllocator* allocator, int threadcount):RefcountedObject(allocator) {
		threads = new(allocator->allocMem(sizeof(Array<PoolableThread>)))Array<PoolableThread>(threadcount,allocator);
		Array<PoolableThread> cachedThreadList = *threads;
		for(int i = 0;i<threadcount;i++) {
			cachedThreadList[i] = PoolableThread(allocator);
		}
	}
	void Destroy() {
		Array<PoolableThread> cached = *threads;
	}
};
};

#endif /* THREADPOOL_H_ */
